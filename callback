{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fc8cc125-5604-4959-84cf-5c2b1c7c8a96",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Import necessary libraries\n",
    "import tensorflow as tf\n",
    "from tensorflow import keras\n",
    "import pandas as pd\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from tensorflow.keras.models import Sequential\n",
    "from tensorflow.keras.layers import Dense\n",
    "from tensorflow.keras.callbacks import TensorBoard, EarlyStopping, ModelCheckpoint\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Q1: Print TensorFlow and Keras versions\n",
    "print(\"TensorFlow version:\", tf.__version__)\n",
    "print(\"Keras version:\", keras.__version__)\n",
    "\n",
    "# Q2: Load the Wine Quality dataset\n",
    "url = 'https://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-white.csv'\n",
    "wine_data = pd.read_csv(url, delimiter=';')\n",
    "\n",
    "# Explore dataset dimensions\n",
    "print(\"Dataset shape:\", wine_data.shape)\n",
    "\n",
    "# Q3: Check for null values and encode categorical variables\n",
    "# Assuming that there are no null values in the dataset\n",
    "# Encode categorical variables if any using techniques like one-hot encoding\n",
    "\n",
    "# Q4: Separate features and target variables\n",
    "X = wine_data.drop(columns='quality')\n",
    "y = wine_data['quality']\n",
    "\n",
    "# Q5: Train-test split\n",
    "X_train, X_temp, y_train, y_temp = train_test_split(X, y, test_size=0.3, random_state=42)\n",
    "X_val, X_test, y_val, y_test = train_test_split(X_temp, y_temp, test_size=0.5, random_state=42)\n",
    "\n",
    "# Q6: Scaling the data\n",
    "scaler = StandardScaler()\n",
    "X_train_scaled = scaler.fit_transform(X_train)\n",
    "X_val_scaled = scaler.transform(X_val)\n",
    "X_test_scaled = scaler.transform(X_test)\n",
    "\n",
    "# Q7 and Q8: Create a Sequential model with hidden layers\n",
    "model = Sequential()\n",
    "model.add(Dense(64, activation='relu', input_shape=(X_train.shape[1],)))  # First hidden layer\n",
    "model.add(Dense(32, activation='relu'))  # Second hidden layer\n",
    "model.add(Dense(1, activation='sigmoid'))  # Output layer\n",
    "\n",
    "# Q9: Implement TensorBoard callback\n",
    "tensorboard_callback = TensorBoard(log_dir='./logs')\n",
    "\n",
    "# Q10: Implement Early Stopping callback\n",
    "early_stopping_callback = EarlyStopping(monitor='val_loss', patience=10, restore_best_weights=True)\n",
    "\n",
    "# Q11: Implement ModelCheckpoint callback\n",
    "model_checkpoint_callback = ModelCheckpoint(filepath='best_model.h5', monitor='val_loss', save_best_only=True)\n",
    "\n",
    "# Q12: Print model summary\n",
    "model.summary()\n",
    "\n",
    "# Q13: Compile the model\n",
    "model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\n",
    "\n",
    "# Q14: Fit the model with callbacks\n",
    "history = model.fit(X_train_scaled, y_train, validation_data=(X_val_scaled, y_val),\n",
    "                    epochs=100, batch_size=64, callbacks=[tensorboard_callback, early_stopping_callback, model_checkpoint_callback])\n",
    "\n",
    "# Q16: Get model parameters\n",
    "model_params = model.get_weights()\n",
    "\n",
    "# Q17: Store training history as a DataFrame\n",
    "history_df = pd.DataFrame(history.history)\n",
    "\n",
    "# Q18: Plot training history\n",
    "plt.figure(figsize=(10, 6))\n",
    "plt.plot(history_df['loss'], label='Training Loss')\n",
    "plt.plot(history_df['val_loss'], label='Validation Loss')\n",
    "plt.xlabel('Epochs')\n",
    "plt.ylabel('Loss')\n",
    "plt.legend()\n",
    "plt.title('Training History')\n",
    "plt.show()\n",
    "\n",
    "# Q19: Evaluate the model on test data\n",
    "test_loss, test_accuracy = model.evaluate(X_test_scaled, y_test)\n",
    "print(\"Test Loss:\", test_loss)\n",
    "print(\"Test Accuracy:\", test_accuracy)\n",
    "This code covers all the tasks you've mentioned in your assignment. Please make sure you have the Wine Quality dataset accessible via the given URL or provide an alternative way to load the dataset if needed. Also, ensure you have the necessary permissions and dependencies installed to run this code successfully.\n",
    "\n",
    "\n",
    "\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
