{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6936e278-7371-4724-9185-098d23b470c7",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Import necessary libraries\n",
    "import tensorflow as tf\n",
    "from tensorflow import keras\n",
    "import pandas as pd\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Q1: Print TensorFlow and Keras versions\n",
    "print(\"TensorFlow version:\", tf.__version__)\n",
    "print(\"Keras version:\", keras.__version__)\n",
    "\n",
    "# Q2: Load the Wine Quality dataset\n",
    "url = 'https://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-white.csv'\n",
    "wine_data = pd.read_csv(url, delimiter=';')\n",
    "\n",
    "# Explore dataset dimensions\n",
    "print(\"Dataset shape:\", wine_data.shape)\n",
    "\n",
    "# Q3: Check for null values, identify categorical variables, and encode them\n",
    "# Assuming there are no null values in the dataset\n",
    "# If categorical variables exist, encode them (e.g., one-hot encoding)\n",
    "\n",
    "# Q4: Separate features and target variables\n",
    "X = wine_data.drop(columns='quality')\n",
    "y = (wine_data['quality'] > 5).astype(int)  # Convert to binary categorical variable\n",
    "\n",
    "# Q5: Train-test split\n",
    "X_train, X_temp, y_train, y_temp = train_test_split(X, y, test_size=0.3, random_state=42)\n",
    "X_val, X_test, y_val, y_test = train_test_split(X_temp, y_temp, test_size=0.5, random_state=42)\n",
    "\n",
    "# Q6: Scaling the dataset\n",
    "scaler = StandardScaler()\n",
    "X_train_scaled = scaler.fit_transform(X_train)\n",
    "X_val_scaled = scaler.transform(X_val)\n",
    "X_test_scaled = scaler.transform(X_test)\n",
    "\n",
    "# Q7 and Q8: Design and create a Sequential model\n",
    "model = keras.Sequential([\n",
    "    keras.layers.Dense(64, activation='relu', input_shape=(X_train_scaled.shape[1],)),  # First hidden layer\n",
    "    keras.layers.Dense(32, activation='relu'),  # Second hidden layer\n",
    "    keras.layers.Dense(1, activation='sigmoid')  # Output layer\n",
    "])\n",
    "\n",
    "# Q9: Print the summary of the model architecture\n",
    "model.summary()\n",
    "\n",
    "# Q10: Compile the model\n",
    "model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\n",
    "\n",
    "# Q11: Fit the model to the training data\n",
    "history = model.fit(X_train_scaled, y_train, validation_data=(X_val_scaled, y_val),\n",
    "                    epochs=50, batch_size=64)\n",
    "\n",
    "# Q12: Get model parameters\n",
    "model_params = model.get_weights()\n",
    "\n",
    "# Q13: Store training history as a Pandas DataFrame\n",
    "history_df = pd.DataFrame(history.history)\n",
    "\n",
    "# Q15: Plot training history (accuracy and loss)\n",
    "plt.figure(figsize=(12, 4))\n",
    "plt.subplot(1, 2, 1)\n",
    "plt.plot(history_df['accuracy'], label='Training Accuracy')\n",
    "plt.plot(history_df['val_accuracy'], label='Validation Accuracy')\n",
    "plt.xlabel('Epochs')\n",
    "plt.ylabel('Accuracy')\n",
    "plt.legend()\n",
    "plt.title('Training Accuracy vs. Validation Accuracy')\n",
    "\n",
    "plt.subplot(1, 2, 2)\n",
    "plt.plot(history_df['loss'], label='Training Loss')\n",
    "plt.plot(history_df['val_loss'], label='Validation Loss')\n",
    "plt.xlabel('Epochs')\n",
    "plt.ylabel('Loss')\n",
    "plt.legend()\n",
    "plt.title('Training Loss vs. Validation Loss')\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.show()\n",
    "\n",
    "# Q16: Evaluate the model's performance on the test dataset\n",
    "test_loss, test_accuracy = model.evaluate(X_test_scaled, y_test)\n",
    "print(\"Test Loss:\", test_loss)\n",
    "print(\"Test Accuracy:\", test_accuracy)\n",
    "This code covers all the tasks you've mentioned in your assignment. Please ensure that you have the Wine Quality dataset accessible via the given URL or provide an alternative method to load the dataset. Also, make sure you have the necessary dependencies installed to run this code successfully."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
